{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /* GIA the Joybot - movement */ #include LiquidCrystal lcd(10, 8, 6, 4, 2, 0); //the right motor will be controlled by the motor A pins on the motor driver const int AIN1 = 7; //control pin 1 on the motor driver for the right motor const int AIN2 = 9; //control pin 2 on the motor driver for the right motor const int PWMA = 11; //speed control pin on the motor driver for the right motor //the left motor will be controlled by the motor B pins on the motor driver const int PWMB = 1; //speed control pin on the motor driver for the left motor const int BIN2 = 5; //control pin 2 on the motor driver for the left motor const int BIN1 = 3; //control pin 1 on the motor driver for the left motor //distance variables const int trigPin = 13; const int echoPin = 12; const int emergency = A0; const int switchbutton = A1; float distance = 0; //variable to store the distance measured by the distance sensor //robot behaviour variables int backupTime = 700; //amount of time that the robot will back up when it senses an object int turnTime = 500; //amount that the robot will turn once it has backed up /********************************************************************************/ void setup() \{ lcd.begin(16, 2); //tell the lcd library that we are using a display that is 16 characters wide and 2 characters high lcd.clear(); pinMode(trigPin, OUTPUT); //this pin will send ultrasonic pulses out from the distance sensor pinMode(echoPin, INPUT); //this pin will sense when the pulses reflect back to the distance sensor pinMode(switchbutton, INPUT_PULLUP); //set this as a pullup to sense whether the switch is flipped pinMode(emergency, INPUT_PULLUP); //set the motor control pins as outputs pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT); pinMode(PWMA, OUTPUT); pinMode(BIN1, OUTPUT); pinMode(BIN2, OUTPUT); pinMode(PWMB, OUTPUT); \} /********************************************************************************/ void loop() \{ //DETECT THE DISTANCE READ BY THE DISTANCE SENSOR distance = getDistance(); if (digitalRead(switchbutton) == LOW) \{ //if the on switch is flipped if (distance < 7) \{ //if an object is detected lcd.clear(); lcd.setCursor(0, 0); //set the cursor to the 0,0 position (top left corner) lcd.print("Flip the switch to play!"); //stop for a moment rightMotor(0); leftMotor(0); delay(1000); //back up rightMotor(-250); leftMotor(-130); delay(backupTime); rightMotor(0); leftMotor(0); delay(3000); \} else \{ //if no obstacle is detected drive forward lcd.clear(); lcd.setCursor(0, 0); //set the cursor to the 0,0 position (top left corner) lcd.print("Come play!!"); rightMotor(250); leftMotor(130); \} \} else \{ //stop the motors lcd.clear(); lcd.setCursor(0, 0); //set the cursor to the 0,0 position (top left corner) lcd.print("Have fun!!"); rightMotor(0); leftMotor(0); \} if (digitalRead(emergency) == LOW) \{ //emergency button lcd.clear(); lcd.setCursor(0,0); lcd.print("Uh Oh! Stop!"); rightMotor(0); leftMotor(0); delay(15000); \} delay(50); //wait 50 milliseconds between readings \} /********************************************************************************/ void rightMotor(int motorSpeed) //function for driving the right motor \{ if (motorSpeed > 0) //if the motor should drive forward (positive speed) \{ digitalWrite(AIN1, LOW); //set pin 1 to high digitalWrite(AIN2, HIGH); //set pin 2 to low \} else if (motorSpeed < 0) //if the motor should drive backward (negative speed) \{ digitalWrite(AIN1, HIGH); //set pin 1 to low digitalWrite(AIN2, LOW); //set pin 2 to high \} else //if the motor should stop \{ digitalWrite(AIN1, LOW); //set pin 1 to low digitalWrite(AIN2, LOW); //set pin 2 to low \} analogWrite(PWMA, abs(motorSpeed)); //now that the motor direction is set, drive it at the entered speed \} /********************************************************************************/ void leftMotor(int motorSpeed) //function for driving the left motor \{ if (motorSpeed > 0) //if the motor should drive forward (positive speed) \{ digitalWrite(BIN1, HIGH); //set pin 1 to high digitalWrite(BIN2, LOW); //set pin 2 to low \} else if (motorSpeed < 0) //if the motor should drive backward (negative speed) \{ digitalWrite(BIN1, LOW); //set pin 1 to low digitalWrite(BIN2, HIGH); //set pin 2 to high \} else //if the motor should stop \{ digitalWrite(BIN1, LOW); //set pin 1 to low digitalWrite(BIN2, LOW); //set pin 2 to low \} analogWrite(PWMB, abs(motorSpeed)); //now that the motor direction is set, drive it at the entered speed \} /********************************************************************************/ //RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR float getDistance() \{ float echoTime; //variable to store the time it takes for a ping to bounce off an object float calculatedDistance; //variable to store the distance calculated from the echo time //send out an ultrasonic pulse that's 10ms long digitalWrite(trigPin, HIGH); delayMicroseconds(10); digitalWrite(trigPin, LOW); echoTime = pulseIn(echoPin, HIGH); //use the pulsein command to see how long it takes for the //pulse to bounce back to the sensor calculatedDistance = echoTime / 148.0; //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound) return calculatedDistance; //send back the distance that was calculated \}}